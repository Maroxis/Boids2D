#pragma kernel CSMain
#define GROUP_SIZE 256
#include "UnityCG.cginc"

struct Boid
{
	float3 position;
	float3 direction;
};

RWStructuredBuffer<Boid> boidBuffer;

CBUFFER_START(Params)
float DeltaTime;
float RotationSpeed;
float BoidSpeed;
float BoidMinSpeed;
float NeighbourDistance;
float AvoidDistance;
int BoidsCount;
CBUFFER_END

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidBuffer[id.x];
	
	float3 pos = boid.position;
	float3 rot = boid.direction;

	float3 separation = float3(0.0, 0.0, 0.0);
	float3 alignment = float3(0.0, 0.0, 0.0);
	float3 cohesion = float3(0.0, 0.0, 0.0);

	uint nearbyCount = 0;
	for (int i = 0; i < BoidsCount; i++)
	{
		if (i != id.x)
		{
			Boid tempBoid = boidBuffer[i];
			if (distance(boid.position, tempBoid.position) < NeighbourDistance)
			{
				alignment += tempBoid.direction;
				cohesion += tempBoid.position;
				nearbyCount++;
			}
			if (distance(boid.position, tempBoid.position) < AvoidDistance) {
				float3 diff = boid.position - tempBoid.position;
				float diffLen = length(diff);
				float scaler = clamp(1.0 - diffLen / NeighbourDistance, 0.0, 1.0);
				separation += diff * (scaler / diffLen);
			}
		}
	}
	if (nearbyCount > 0) {
		alignment /= nearbyCount;
		cohesion /= nearbyCount;
		//cohesion = normalize(cohesion);
		//alignment = normalize(alignment);
		cohesion = (cohesion - boid.position) / 100;
		alignment = (alignment - boid.direction) / 8;
	}

	boid.direction += separation + alignment + cohesion;

	float mag = length(boid.direction);
	if (mag > 1.0)
		boid.direction = normalize(boid.direction);

	else if (mag == 0.0)
	{
		boid.direction[0] = BoidMinSpeed / 0.141 + 0.001;
		boid.direction[1] = BoidMinSpeed / 0.141 + 0.001;
		boid.direction[2] = 0.0;
	}
	else if (mag < BoidMinSpeed) {
		boid.direction = (boid.direction / mag) * BoidMinSpeed;
	}

	float ip = exp(-RotationSpeed * DeltaTime);
	boidBuffer[id.x].direction = lerp((boidBuffer[id.x].direction), boid.direction, ip);
	//boidBuffer[id.x].direction = boid.direction;
	boidBuffer[id.x].position += (boidBuffer[id.x].direction) * (BoidSpeed * DeltaTime);
}
