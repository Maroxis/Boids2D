#pragma kernel CSMain
#pragma kernel CSStart
#define GROUP_SIZE 32
#include "UnityCG.cginc"

struct Boid
{
	float3 position;
	float3 direction;
};
/*
struct Test
{
	int x;
};
RWStructuredBuffer<Test> testBuffer;
*/
RWStructuredBuffer<Boid> boidBuffer;


CBUFFER_START(Params)
float DeltaTime;
float RotationSpeed;
float BoidSpeed;
float BoidMinSpeed;
float NeighbourDistance;
float AvoidDistance;
float BorderX;
float BorderY;
//float CellSizeX;
//float CellSizeY;
unsigned int BoidsCount;
CBUFFER_END

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidBuffer[id.x];
	
	float3 pos = boid.position;
	float3 rot = boid.direction;

	float3 separation = float3(0.0, 0.0, 0.0);
	float3 alignment = float3(0.0, 0.0, 0.0);
	float3 cohesion = float3(0.0, 0.0, 0.0);

	uint nearbyCount = 0;
	for (unsigned int i = 0; i < BoidsCount; i++)
	{
		if (i == id.x)
			continue;

		Boid tempBoid = boidBuffer[i];

		if (distance(boid.position, tempBoid.position) < NeighbourDistance)
		{
			alignment += tempBoid.direction;
			cohesion += tempBoid.position;
			nearbyCount++;
		}
		if (distance(boid.position, tempBoid.position) < AvoidDistance) {
			float3 diff = boid.position - tempBoid.position;
			float diffLen = length(diff);
			float scaler = clamp(1.0 - diffLen / NeighbourDistance, 0.0, 1.0);
			separation += (diff * (scaler / diffLen))/3;
		}
		
	}
	if (nearbyCount > 0) {
		alignment /= nearbyCount;
		cohesion /= nearbyCount;
		//cohesion = normalize(cohesion);
		//alignment = normalize(alignment);
		cohesion = (cohesion - boid.position) / 500;
		alignment = (alignment - boid.direction) / 8;
	}
	
	//Border 
	float3 border = float3(0.0, 0.0, 0.0);
	float borderForce = 0.02;
	int slack = 20;
	//if (borderForce != 0)
	//	slack = 1 / borderForce;
	//if (slack > BorderY)
	//	slack = BorderY / 5;

	if (boid.position[0] < BorderX * (-1) + slack)
		border[0] = borderForce;
	else if (boid.position[0] > BorderX - slack)
		border[0] = borderForce * (-1);

	if (boid.position[1] < BorderY * (-1) + slack)
		border[1] = borderForce;
	else if (boid.position[1] > BorderY - slack)
		border[1] = borderForce * (-1);

	//Endof Border

	boid.direction += (separation + alignment + cohesion + border);// * testBuffer[id.x].x;

	float mag = length(boid.direction);
	if (mag > 1.0)
		boid.direction = normalize(boid.direction);

	else if (mag == 0.0)
	{
		boid.direction[0] = BoidMinSpeed / 0.141 + 0.001;
		boid.direction[1] = BoidMinSpeed / 0.141 + 0.001;
		boid.direction[2] = 0.0;
	}
	else if (mag < BoidMinSpeed) {
		boid.direction = (boid.direction / mag) * BoidMinSpeed;
	}

	float ip = exp(-RotationSpeed * DeltaTime);
	boid.direction = lerp((boid.direction), boid.direction, ip);
	boid.position += (boid.direction) * (BoidSpeed * DeltaTime);

	boidBuffer[id.x] = boid;
}
[numthreads(GROUP_SIZE, 1, 1)]
void CSStart(uint3 id : SV_DispatchThreadID)
{
	//testBuffer[id.x].x = 1;
}